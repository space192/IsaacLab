# Here we set the parts that would
# be re-used between services to an
# extension field
# https://docs.docker.com/compose/compose-file/compose-file-v3/#extension-fields
x-default-isaac-lab-volumes: &default-isaac-lab-volumes
  # These volumes follow from this page
  # https://docs.omniverse.nvidia.com/app_isaacsim/app_isaacsim/install_faq.html#save-isaac-sim-configs-on-local-disk
  - type: bind
    source: /mnt/user/appdata/Isaac/isaac-cache-kit
    target: ${DOCKER_ISAACSIM_ROOT_PATH}/kit/cache
  - type: bind
    source: /mnt/user/appdata/Isaac/isaac-cache-ov
    target: ${DOCKER_USER_HOME}/.cache/ov
  - type: bind
    source: /mnt/user/appdata/Isaac/isaac-cache-pip
    target: ${DOCKER_USER_HOME}/.cache/pip
  - type: bind
    source: /mnt/user/appdata/Isaac/isaac-cache-gl
    target: ${DOCKER_USER_HOME}/.cache/nvidia/GLCache
  - type: bind
    source: /mnt/user/appdata/Isaac/isaac-cache-compute
    target: ${DOCKER_USER_HOME}/.nv/ComputeCache
  - type: bind
    source: /mnt/user/appdata/Isaac/isaac-logs
    target: ${DOCKER_USER_HOME}/.nvidia-omniverse/logs
  - type: bind
    source: /mnt/user/appdata/Isaac/isaac-carb-logs
    target: ${DOCKER_ISAACSIM_ROOT_PATH}/kit/logs/Kit/Isaac-Sim
  - type: bind
    source: /mnt/user/appdata/Isaac/isaac-data
    target: ${DOCKER_USER_HOME}/.local/share/ov/data
  - type: bind
    source: /mnt/user/appdata/Isaac/isaac-docs
    target: ${DOCKER_USER_HOME}/Documents
  - type: bind
    source: /mnt/user/appdata/Isaac/user-data
    target: ${DOCKER_USER_HOME}
    # This overlay allows changes on the local files to
    # be reflected within the container immediately
  - type: bind
    source: ../source
    target: ${DOCKER_ISAACLAB_PATH}/source
  - type: bind
    source: ../docs
    target: ${DOCKER_ISAACLAB_PATH}/docs
  - type: bind
    source: ../tools
    target: ${DOCKER_ISAACLAB_PATH}/tools
    # The effect of these volumes is twofold:
    # 1. Prevent root-owned files from flooding the _build and logs dir
    #    on the host machine
    # 2. Preserve the artifacts in persistent volumes for later copying
    #    to the host machine
  - type: bind
    source: /mnt/user/appdata/Isaac/isaac-lab-docs
    target: ${DOCKER_ISAACLAB_PATH}/docs/_build
  - type: bind
    source: /mnt/user/appdata/Isaac/isaac-lab-logs
    target: ${DOCKER_ISAACLAB_PATH}/logs
  - type: bind
    source: /mnt/user/appdata/Isaac/isaac-lab-data
    target: ${DOCKER_ISAACLAB_PATH}/data_storage
  # - type: bind
  # source: /tmp/.X11-unix/
  # target: /tmp/.X11-unix/
  # read_only: true
  # - type: bind
  # source: /tmp/tmp/pulse/
  # target: /tmp/tmp/pulse/

x-default-isaac-lab-environment: &default-isaac-lab-environment
  - ISAACSIM_PATH=${DOCKER_ISAACLAB_PATH}/_isaac_sim
  - OMNI_KIT_ALLOW_ROOT=1
  - ENABLE_SUNSHINE=true

x-default-isaac-lab-deploy: &default-isaac-lab-deploy
  resources:
    reservations:
      devices:
        - driver: nvidia
          device_ids:
            - GPU-ab6ea223-3c99-053b-ff19-e87c35393e1c # GTX 1070
            - GPU-38dec081-9601-f6ca-b0fa-28409b1b1c12 # P40 - 1
            # - GPU-25cf053e-194f-6407-8122-5c2c2b3afcdf # P40 - 2
          capabilities: [gpu]

services:
  # This service is the base Isaac Lab image
  isaac-lab-base:
    profiles: ["base"]
    env_file: .env.base
    build:
      context: ../
      dockerfile: docker/Dockerfile.base
      args:
        - ISAACSIM_BASE_IMAGE_ARG=${ISAACSIM_BASE_IMAGE}
        - ISAACSIM_VERSION_ARG=${ISAACSIM_VERSION}
        - ISAACSIM_ROOT_PATH_ARG=${DOCKER_ISAACSIM_ROOT_PATH}
        - ISAACLAB_PATH_ARG=${DOCKER_ISAACLAB_PATH}
        - DOCKER_USER_HOME_ARG=${DOCKER_USER_HOME}
    image: isaac-lab-base
    container_name: isaac-lab-base
    environment: *default-isaac-lab-environment
    volumes: *default-isaac-lab-volumes
    network_mode: bridge
    ports:
      - 3009:3009
      - "25:25"
      - "1025:1025/tcp"
      - "1030:1030/tcp"
      - "1031:1031/tcp"
      - "1051:1051/tcp"
      - "1039-1041:1039-1041/udp"
    ulimits:
      nofile:
        soft: 1024
        hard: 524288
    ipc: host
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
      - SYS_NICE
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    shm_size: 2G
    deploy: *default-isaac-lab-deploy
    devices:
      - /dev/fuse
      - /dev/uinput
      - /dev/dri
    device_cgroup_rules:
      - "c 13:* rmw"
    labels:
      - net.unraid.docker.webui=http://[IP]:[PORT:3009]/vnc.html
      - net.unraid.docker.icon=https://www.nesabamedia.com/wp-content/uploads/2023/02/NVIDIA-Omniverse-logo.png
    # This is the entrypoint for the container
    entrypoint: bash
    command: [/app/entrypoint.sh]
    stdin_open: true
    tty: true

  # This service adds a ROS2 Humble
  # installation on top of the base image
  isaac-lab-ros2:
    profiles: ["ros2"]
    env_file:
      - .env.base
      - .env.ros2
    build:
      context: ../
      dockerfile: docker/Dockerfile.ros2
      args:
        # ROS2_APT_PACKAGE will default to NONE. This is to
        # avoid a warning message when building only the base profile
        # with the .env.base file
        - ROS2_APT_PACKAGE=${ROS2_APT_PACKAGE:-NONE}
    image: isaac-lab-ros2
    container_name: isaac-lab-ros2
    environment: *default-isaac-lab-environment
    volumes: *default-isaac-lab-volumes
    network_mode: bridge
    ports:
      - 3009:3009
      - "25:25"
    ulimits:
      nofile:
        soft: 1024
        hard: 524288
    ipc: host
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
      - SYS_NICE
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    shm_size: 2G
    deploy: *default-isaac-lab-deploy
    device_cgroup_rules:
      - "c 13:* rmw"
    labels:
      - net.unraid.docker.webui=http://[IP]:[PORT:3009]
      - net.unraid.docker.icon=https://www.nesabamedia.com/wp-content/uploads/2023/02/NVIDIA-Omniverse-logo.png
    # This is the entrypoint for the container
    entrypoint: bash
    command: [/app/entrypoint.sh]
    stdin_open: true
    tty: true
