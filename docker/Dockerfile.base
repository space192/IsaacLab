# Copyright (c) 2022-2024, The Isaac Lab Project Developers.
# All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause

# Nvidia Dockerfiles: https://github.com/NVIDIA-Omniverse/IsaacSim-dockerfiles
# Please check above link for license information.

# Base image
ARG ISAACSIM_BASE_IMAGE_ARG
ARG ISAACSIM_VERSION_ARG
FROM ${ISAACSIM_BASE_IMAGE_ARG}:${ISAACSIM_VERSION_ARG} AS base
ENV ISAACSIM_VERSION=${ISAACSIM_VERSION_ARG}

# Set default RUN shell to bash
SHELL ["/bin/bash", "-c"]

# Adds labels to the Dockerfile
LABEL version="1.1"
LABEL description="Dockerfile for building and running the Isaac Lab framework inside Isaac Sim container image."

# Arguments
# Path to Isaac Sim root folder
ARG ISAACSIM_ROOT_PATH_ARG
ENV ISAACSIM_ROOT_PATH=${ISAACSIM_ROOT_PATH_ARG}
# Path to the Isaac Lab directory
ARG ISAACLAB_PATH_ARG
ENV ISAACLAB_PATH=${ISAACLAB_PATH_ARG}
# Home dir of docker user, typically '/root'
ARG DOCKER_USER_HOME_ARG
ENV DOCKER_USER_HOME=${DOCKER_USER_HOME_ARG}

# Set environment variables
ENV LANG=C.UTF-8
ENV DEBIAN_FRONTEND=noninteractive

USER root

# Install dependencies and remove cache
RUN --mount=type=cache,target=/var/cache/apt \
    apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    libglib2.0-0 \
    openbox \
    net-tools \
    novnc \
    htop \
    nvtop \
    supervisor \
    x11vnc \
    nano \
    tint2 \
    kitty \
    xterm \
    wget \
    libglvnd0 \ 
    libgl1 \
    libglx0 \
    libegl1 \
    libgles2 \
    pciutils \
    xorg \
    xserver-xorg-video-dummy \
    kmod \
    openssh-server \
    libglvnd-dev \
    pkg-config \
    dbus-x11 \
    xserver-xorg-core \
    libnss3 \
    libfuse2 \
    libasound2 \
    xdg-utils \
    xserver-xorg-input-evdev \
    xserver-xorg-input-libinput \
    xserver-xorg-legacy \
    xserver-xorg-video-all \
    xcvt \
    ncurses-term && \
    wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -O /tmp/chrome.deb && \
    apt install /tmp/chrome.deb -y &&\
    rm -rf /tmp/chrome.deb &&\
    apt install -y software-properties-common apt-transport-https wget && \
    wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | apt-key add - && \
    add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" && \
    apt update && \
    apt install -y code && \
    # sed -i '$ s/$/ --no-sandbox/' /usr/bin/google-chrome && \
    apt -y autoremove && apt clean autoclean && \
    rm -rf /var/lib/apt/lists/*


COPY --from=lizardbyte/sunshine:v2024.1109.210203-ubuntu-22.04 /sunshine.deb /usr/src/sunshine.deb
RUN \
    echo "**** Update apt database ****" \
    && apt-get update \
    && \
    echo "**** Install Sunshine requirements ****" \
    && apt-get install -y \
    va-driver-all \
    && \
    echo "**** Install Sunshine ****" \
    && apt-get install -y \
    /usr/src/sunshine.deb \
    && \
    echo "**** Section cleanup ****" \
    && apt-get clean autoclean -y \
    && apt-get autoremove -y \
    && rm -rf \
    /var/lib/apt/lists/* \
    /var/tmp/* \
    /tmp/* \
    && \
    echo

ENV X11VNC_PASSWORD "password"
ENV DISPLAY :1
ENV TZ "Pacific/Auckland"
ENV DISPLAY_CDEPTH "24"
ENV DISPLAY_REFRESH "120"
ENV DISPLAY_SIZEH "1080"
ENV DISPLAY_SIZEW "1920"
ENV DISPLAY_VIDEO_PORT "DFP"
ENV X11VNC_PASSWORD "password"
ENV XORG_SOCKET_DIR "/tmp/.X11-unix"
ENV XDG_RUNTIME_DIR "/tmp/.X11-unix/run"
ENV HOST_DBUS "false"
ENV MODE "primary"
ENV USER "root"
ENV ENABLE_SUNSHINE "false"
ENV USER_PASSWORD "Fournier1"
ENV USER_HOME="/root"

# Copy the Isaac Lab directory (files to exclude are defined in .dockerignore)
COPY ../ ${ISAACLAB_PATH}

# Set up a symbolic link between the installed Isaac Sim root folder and _isaac_sim in the Isaac Lab directory
RUN ln -sf ${ISAACSIM_ROOT_PATH} ${ISAACLAB_PATH}/_isaac_sim

# Install apt dependencies for extensions that declare them in their extension.toml
RUN --mount=type=cache,target=/var/cache/apt \
    ${ISAACLAB_PATH}/isaaclab.sh -p ${ISAACLAB_PATH}/tools/install_deps.py apt ${ISAACLAB_PATH}/source/extensions && \
    apt -y autoremove && apt clean autoclean && \
    rm -rf /var/lib/apt/lists/*

# for singularity usage, have to create the directories that will binded
RUN mkdir -p ${ISAACSIM_ROOT_PATH}/kit/cache && \
    mkdir -p ${DOCKER_USER_HOME}/.cache/ov && \
    mkdir -p ${DOCKER_USER_HOME}/.cache/pip && \
    mkdir -p ${DOCKER_USER_HOME}/.cache/nvidia/GLCache &&  \
    mkdir -p ${DOCKER_USER_HOME}/.nv/ComputeCache && \
    mkdir -p ${DOCKER_USER_HOME}/.nvidia-omniverse/logs && \
    mkdir -p ${DOCKER_USER_HOME}/.local/share/ov/data && \
    mkdir -p ${DOCKER_USER_HOME}/Documents

# for singularity usage, create NVIDIA binary placeholders
RUN touch /bin/nvidia-smi && \
    touch /bin/nvidia-debugdump && \
    touch /bin/nvidia-persistenced && \
    touch /bin/nvidia-cuda-mps-control && \
    touch /bin/nvidia-cuda-mps-server && \
    touch /etc/localtime && \
    mkdir -p /var/run/nvidia-persistenced && \
    touch /var/run/nvidia-persistenced/socket

# installing Isaac Lab dependencies
# use pip caching to avoid reinstalling large packages
RUN --mount=type=cache,target=${DOCKER_USER_HOME}/.cache/pip \
    ${ISAACLAB_PATH}/isaaclab.sh --install

# aliasing isaaclab.sh and python for convenience
RUN echo "export ISAACLAB_PATH=${ISAACLAB_PATH}" >> ${HOME}/.bashrc && \
    echo "alias isaaclab=${ISAACLAB_PATH}/isaaclab.sh" >> ${HOME}/.bashrc && \
    echo "alias python=${ISAACLAB_PATH}/_isaac_sim/python.sh" >> ${HOME}/.bashrc && \
    echo "alias python3=${ISAACLAB_PATH}/_isaac_sim/python.sh" >> ${HOME}/.bashrc && \
    echo "alias pip='${ISAACLAB_PATH}/_isaac_sim/python.sh -m pip'" >> ${HOME}/.bashrc && \
    echo "alias pip3='${ISAACLAB_PATH}/_isaac_sim/python.sh -m pip'" >> ${HOME}/.bashrc && \
    echo "alias tensorboard='${ISAACLAB_PATH}/_isaac_sim/python.sh ${ISAACLAB_PATH}/_isaac_sim/tensorboard'" >> ${HOME}/.bashrc && \
    echo "export TZ=$(date +%Z)" >> ${HOME}/.bashrc

# make working directory as the Isaac Lab directory
# this is the default directory when the container is run
WORKDIR ${ISAACLAB_PATH}


RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    sed -i 's/#Port 22/Port 25/' /etc/ssh/sshd_config &&\
    mkdir -p /run/sshd && ssh-keygen -A

COPY docker/xorg.conf.nvidia-headless /etc/X11/xorg.conf
COPY docker/templates /templates
COPY docker/usr /usr
COPY docker/novnc /app
COPY docker/rc.xml /root/.config/openbox/rc.xml
RUN mkdir -p /root/.config/tint2  && cp /etc/xdg/tint2/tint2rc /root/.config/tint2/ &&\
    chmod +x /app/entrypoint.sh && chmod +x /app/script.sh